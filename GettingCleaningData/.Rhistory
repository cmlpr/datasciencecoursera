#include <Rcpp.h>
using namespace Rcpp;
install.packages("Rcpp")
library(Rcpp)
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
DataFrame modifyDataFrame(DataFrame df) {
df <- data.frame(a = c(1, 2, 3), b = c("x", "y", "z"))
modifyDataFrame(df)
install.packages(c("Rcpp", "testthat"))
install.packages(c("data.table", "DBI", "DEoptimR", "devtools", "GISTools", "jsonlite", "raster", "Rcpp", "rgeos", "spdep"), lib="C:/Users/ozenca/Documents/R/win-library/3.1")
R.home()
install.packages("RMySQL")
ucscDB <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu") #connect and create handle
library(rhdf5)
setwd("C:\Users\ozenca\Documents\GitHub\datasciencecoursera\GettingCleaningData")
setwd("C:/Users/ozenca/Documents/GitHub/datasciencecoursera/GettingCleaningData")
list.files("./Data")
created = h5createFile("./Data/example.h5")
created
created = h5createGroup("./Data/example.h5","foo")
created = h5createGroup("./Data/example.h5","baa")
created = h5createGroup("./Data/example.h5","foo/foobaa")
h5ls("./Data/example.h5")
A = matrix(1:10, nr=5, nc=2)
# Write data in the group
h5write(A, "./Data/example.h5", "foo/A")
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
# adaa atributes
attr(B,"scale") <- "liter"
h5write(B, "./Data/example.h5", "foo/foobaa/N")
h5ls("./Data/example.h5")
df <- data.frame(1L:5L,seq(0,1,length.out=5), c("ab","cde","fghi","a","s"), stringsAsFactors=FALSE)
h5write(df, "./Data/example.h5", "df")
df <- data.frame(1L:5L,seq(0,1,length.out=5), c("ab","cde","fghi","a","s"), stringsAsFactors=FALSE)
h5write(df, "./Data/example.h5", "df")
h5ls("./Data/example.h5")
df <- data.frame(1L:5L,seq(0,1,length.out=5), c("ab","cde","fghi","a","s"), stringsAsFactors=FALSE)
h5write(df, "./Data/example.h5", "df")
h5ls("./Data/example.h5")
readA = h5read("./Data/example.h5","foo/A")
readA
readA = h5read("./Data/example.h5","foo/foobaa")
readA
readA = h5read("./Data/example.h5","df")
readA
h5write(c(12,13,14),"./Data/example.h5","foo/A",index=list(1:3,1))
h5read("./Data/example.h5", "foo/A")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
# Parsing with XML
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes = T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr)
html2 = GET(url)
content2 = content(html2, as="text")
parsedHtml = htmlParse(content2, asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
pg1
pg2 = GET("http://httpbin.org/basic-auth/user/passwd", authenticate("user","passwd"))
pg2
names(pg2)
library(httr)
html2 = GET(url)
content2 = content(html2, as="text")
parsedHtml = htmlParse(content2, asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
# Accessing websites with passwords
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
pg1
# Accessing websites with passwords
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
pg1
pg2 = GET("http://httpbin.org/basic-auth/user/passwd", authenticate("user","passwd"))
pg2
names(pg2)
google = handle("http://google.com")
pg1 = GET(handle=google, path="/")
pg2 = GET(handle=google, path="search")
pg1
pg2
pg1
pg2
myapp = oauth_app("twitter",
key="uF2h52MH0wPb5Xnc7NY83d5Ob",
secret="2SZDCjxS4Z6QDsU7rZVYqox6FCUs7LwLiectZrf0VO6YY2WOFI")
# Sign
sig = sign_oauth1.0(myapp,
token = "26301788-QbEJodeSWSjnUvZ441jkzOdeG1z6QrkQ9g4l67gCW",
token_secret = "0CAieEaEWrHk76LotMPFehSqs2XFlleYqqSHGKMRWc0CL")
#api version 1.1, statuses from timeline
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
library(httr)
library(jsonlite)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2
json2[1,1:4]
json2[4,1:4]
setwd("C:\\Users\\ozenca\\Documents\\Courses\\Coursera-Getting and Cleaning Data\\Quiz2")
library(httr)
oauth_endpoints("github")
myapp = oauth_app("github", key="a1904acad3ad588004e4", secret="352231cd7c11f54e80e20a44243330111f86848a")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
names(req)
json1 = content(req)
library(jsonlite)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[5,]$created_at
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileurl, destfile= "Data/acsurvey.csv")
download.file(fileurl, destfile= "./Data/acsurvey.csv")
getwd()
setwd("C:/Users/ozenca/Documents/GitHub/datasciencecoursera/GettingCleaningData")
list.files("./Data")
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileurl, destfile= "./Data/acsurvey.csv")
list.files("./Data")
dateDownloaded <- date()
acs <- read.table("./Data/acsurvey.csv", sep = ",", header = TRUE, quote = "")
head(acs)
names(acs)
str(acs)
library(sqldf)
a<-sqldf("select pwgtp1 from acs where AGEP < 50")
a
unique(acs$AGEP)
sqldf("select distinct AGEP from acs")
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
htmlCode[1]
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
####################
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(fileurl, destfile= "./Data/sst.for")
list.files("./Data")
acs <- read.fortran("./Data/sst.for", c("A28","A4","A30"))
head(acs[1])
acs[[2]]
as.numeric(acs[[2]])
sum(as.numeric(acs[[2]]), na.rm = TRUE)
