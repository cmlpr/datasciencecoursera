swirl()
num_vect <- c(0.5,55,-10,6)
tf <- numvect < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Cem Ozen")
my_name
paste(my_names, "s'")
paste(my_name, "s'")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
# method 2
y <- if (x > 3) {
10
} else {
0
}
for (i in 1:10) {
print(i)
}
x <- c("a", "b", "c","d")
# example 1
for(i in 1:4) {
print(x[i])
}
# example 2
for(i seq_along(x)) {
print(x[i])
# example 2
for(i in seq_along(x)) {
print(x[i])
}
# example 3
for(letter in x) {
print(letter)
}
for(i in 1:4) print(x[i])
x <- matrix(1:6, 2, 3)
for (i in seq_along(nrow(x))) {
for (j in seq_along(ncol(x))) {
print(x[i,j])
}
}
x <- matrix(1:6, 2, 3)
for (i in seq_along(nrow(x))) {
for (j in seq_along(ncol(x))) {
print(x[i,j])
}
}
x
for (i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x))) {
print(x[i,j])
}
}
seq_len(4)
count <- 0
while(count < 10) {
print(count)
count <- count + 1
}
z <- 5
while(z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) { ##random walk
z <- z + 1
} else {
z <- z - 1
}
}
x0 <- 1
x1 <- 1e-8
repeat {
x1 <- computeEstimate()
if(abs(x1 - x0) < tol) {
break
} else {
x0 <- x1
}
}
for (i in 1:100) {
if (i <= 20) {
next
}
print(i)
}
rnorm
mydata <- rnorm(100)
sd(mydata)
sd(x = mydata)
sd(x = mydata, na.rm = FALSE)
sd(na.rm = FALSE, x = mydata)
sd(na.rm = FALSE, mydata)
args(lm)
lm(data = mydata, y ~ x, model = FALSE, 1:100)
lm(data = mydata, y ~ x, model = FALSE, 1:100)
mydata <- rnorm(100)
lm(data = mydata, y ~ x, model = FALSE, 1:100)
lm(y ~ x, mydata, 1:100, model = FALSE)
mean
args(paste)
args(cat)
paste("a", "b", sep = ":")
paste("a", "b", sep = ":")
paste("a", "b", s = ":")
f <- function(a, b = 1, c = 2, d = NULL) {
print(a,b,c,d)
}
f(1)
f(1)
f <- function(a, b = 1, c = 2, d = NULL) {
print(a)
print(b)
print(c)
print(d)
}
f(1)
f(1,3)
f(2,333, 666, "a")
add2 <- function(x,y) {
x + y
}
add2(1,3)
above10(1:100)
above10 <- function(x) {
x[>10]
}
above10(1:100)
above10 <- function(x) {
x[x>10]
}
above10(1:100)
use <- x >10
x[use]
}
above10 <- function(x) {
use <- x >10
x[use]
}
above10(1:100)
above <- function(x, n) {
use <- x > n
x[use]
}
above(1:20, 5)
columnmean <- function(y) {
nc < ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means <- mean(y[,i])
}
means
}
columnmean(airquality)
airquality
columnmean(airquality)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means <- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
lm
lm<- function(x) { x * x}
lm
search()
cube <- make.power(3)
make.power <- function(n) {
pow <- function(x) {
x ^ n
}
pow
}
cube <- make.power(3)
square <- make.power(2)
cube(3)
square(3)
cube(5)
square(6)
ls(environment(cube))
get("n", environment(cube))
ls(environment(square))
get("n", environment(square))
get("x", environment(cube))
get("pow", environment(cube))
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
y <- 10
f <- function(x) {
y <- 2
y ^ 2 + g(x)
}
g <- function(x) {
x * y
}
f(3)
ls(environment(f))
y
get("y", environment(f))
ls(environment(g))
get("y", environment(g))
x <- 1:4
y <- 6:9
x <- 1:4; y <- 6:9
x + y
x > 2
x >= 2
y == 8
x * y
x / y
x <- matrix(1:4, 2, 2); y <- matrix(rep(10,4), 2, 2)
x * y
x / y
x %*% y
x <- as.Date("1970-01-01")
x
unclass(x)
unclass(as.Date("1970-01-01"))
unclass(as.Date("1970-01-02"))
unclass(as.Date("2014-09-06"))
weekdays
weekdays # give the day of the week
months   # give the month name
quarters # give the quater number
x <- Sys.time()
x
p <- as.POSIXlt(x)
p
names(unclass(p))
p$sec
p$sec
p$sec
p$gmtoff
x$sec
datestring <- c("January 10, 2012 10:40", "December 9, 2011 9:10")
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
class(x)
x <- as.Date("2012-01-01")
y <- strptime("9 Jan 2011, 11:34:21", "%d %b %Y %H:%M:%S")
x - y
x <- as.POSIXlt(x)
x-y
x <- as.Date("2012-01-01")
y <- strptime("9 Jan 2011, 11:34:21", "%d %b %Y %H:%M:%S")
x - y
x <- as.POSIXlt(x)
x-y
y
y <- strptime("9 Jan 2011 11:34:21", "%d %b %Y %H:%M:%S")
y
x - y
x <- as.POSIXlt(x)
x-y
x <- as.Date("2012-03-01"); y <- as.Date("2012-02-28")
x-y
x <- as.POSIXct("2012-10-25 01:00:00")
y <- as.POSIXct("2012-10-25 06:00:00", tz = "GMT")
x-y
y-x
dir()
unzip("\Data\quiz1_data.zip")
unzip("\\Data\\quiz1_data.zip")
?unzip
unzip("\\Data\\quiz1_data.zip", exdir = "\\Data")
dir()
dir()
unzip("\\Data\\quiz1_data.zip", exdir = "\\Data\\")
dir()
unzip("\\Data\\quiz1_data.zip", exdir = "\\Data")
unzip("Data\\quiz1_data.zip", exdir = "Data")
dir()
unzip("Data/quiz1_data.zip", exdir = "Data")
dir()
dir("Data")
head(read.csv("Data/hw1_data.csv"))
data <- read.csv("Data/hw1_data.csv")
data
names(data)
}
What is the result of running
cube <- function(x, n) {
x^3
}
cube(3)
cube <- function(x, n) {
x^3
}
#What is the result of running cube(3) in R after defining this function?
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
#Consider the following function
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
lapply
x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
x <- 1:4
lapply(x, runif)
?runif
lapply(x, runif, min = 0, max = 10)
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
x
lapply(x, function(elt) elt[,1])
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20,1))
x
lapply(x, mean)
sapply(x, mean)
str(apply)
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
apply(x, 1, mean)
rowSums = apply(x, 1, sum)
rowMeans = apply(x, 1, mean)
colSums = apply(x, 2, sum)
colMeans = apply(x, 2, mean)
rowSums(x)
apply(x, 1, quantile, probs = c(0.25, 0.75))
a <- array(rnorm(2 * 2 * 10), c(2,2,10))
a
apply(a, c(1,2), mean)
rowMeans(a, dim = 2)
str(tapply)
x <- c(rnorm(10), runif(10), rnorm(10,1))
x
f <- gl(3, 10)
f
tapply(x, f, mean)
tapply(x, f, mean, simplify = FALSE)
tapply(x, f, raneg)
tapply(x, f, range)
str(split)
split(x, f)
lapply(split(x, f), mean)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
s
lapply(s, function(x), colMeans(x[, c("Ozone", "Solar.R")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R")]), na.rm - TRUE)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R")], na.rm = TRUE))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R")], na.rm = TRUE))
x <- rnorm(10)
f1 <- gl(2, 5)
f2 <- gl(5, 2)
f1
f2
interaction(f1, f2)
?interaction
str(split(x, list(f1, f2)))
str(split(x, list(f1, f2), drop = TRUE))
str(mapply)
# FUN is a function to apply
list (rep(1,4), rep(2,3), rep(3,2), rep(4,1))
mapply(rep, 1:4, 4:1)
noise(5, 1, 2)
noise <- function(n, mean, sd) {
rnorm(n, mean, sd)
}
noise(5, 1, 2)
noise(1:5, 1:5, 2)
mapply(noise, 1:5, 1:5, 2)
noise(1:5, 1:5, 2) # aren't the same
list(noise(1,1,2), noise(2,2,2), noise(3,3,2), noise(4,4,2), noise(5,5,2))
log(-1)
printmessage <- function(x) {
if (x > 0 )
print("x is greater than zero")
else
print("x is smaller than or equal to zero")
invisible(x)
}
printmessage(100)
printmessage(0)
printmessage(-100)
invisible(x)
printmessage <- function(x) {
if (x > 0 )
print("x is greater than zero")
else
print("x is smaller than or equal to zero")
x
invisible(x)
}
printmessage(100)
printmessage(-100)
printmessage <- function(x) {
if (x > 0 )
print("x is greater than zero")
else
print("x is smaller than or equal to zero")
x
#invisible(x)
}
printmessage(100)
printmessage(-100)
printmessage(NA)
printmessage2 <- function(x) {
if(is.na(x))
print("x is a missing value")
else if (x > 0 )
print("x is greater than zero")
else
print("x is smaller than or equal to zero")
x
invisible(x)
}
x <- log(-1)
printmessage2(x)
mean(x)
mean(x)
traceback()
lm(y ~x)
traceback()
debug(lm)
lm(y~x)
#recover
option(error = recover)
read.csv("nosuchfile")
option(error = recover)
options(error = recover)
read.csv("nosuchfile")
library(datasets)
data(iris)
#A description of the dataset can be found by running
?iris
mean(iris$SepalLength)
mean(iris$SepalLength, na.rm = TRUE)
iris
mean(iris$Sepal.Length, na.rm = TRUE)
?apply
apply(iris[,1:4], 2, mean)
library(datasets)
data(mtcars)
# There will be an object names 'mtcars' in your workspace.
# You can find some information about the dataset by running
?mtcars
# How can one calculate the average miles per gallon (mpg) by number of
# cylinders in the car (cyl)?
mtcars
?tapply
sapply(split(mtcars$mpg, mtcars$cyl), mean)
?mtcars
sapply(split(mtcars$hp, mtcars$cyl), mean)
x["6"] - x["4"]
x <- sapply(split(mtcars$hp, mtcars$cyl), mean)
x["6"] - x["4"]
x["6"]
x["6"] - x["4"]
debug(ls)
ls
?ls
library(datasets)
data(iris)
#A description of the dataset can be found by running
?iris
0
m
''
quir
quit
